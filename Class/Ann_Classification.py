# -*- coding: utf-8 -*-
"""ANN-Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L_hr2hDk6rtPc_2_M_zOLMFvtI5ryo7K
"""

import pandas as pd
import numpy as np
import os

rf = pd.read_csv('/content/ANN-Classification.csv')

rf.head()

rf.info()

print(np.unique(rf['price_range']))

rf.head()

rf.describe()

X = rf.iloc[:,0:20]
y = rf.iloc[:,-1]

from sklearn.feature_selection import chi2
from sklearn.feature_selection import SelectKBest

filter = SelectKBest(chi2,k=10)

best_features = filter.fit(X,y)

best_features.scores_

rf_features = pd.DataFrame(best_features.scores_)
rf_columns = pd.DataFrame(X.columns)

featureScores = pd.concat([rf_columns,rf_features],axis=1)

featureScores.columns = ['Features','Score']

featureScores.sort_values(by='Score',ascending=False)

X = rf[['ram','px_height','battery_power','px_width','mobile_wt','int_memory','sc_w','talk_time','fc','sc_h']]

X

X = X.values
y = y.values

print(X.shape,y.shape)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)

y = y.reshape(-1,1)

from sklearn.preprocessing import OneHotEncoder
ohot = OneHotEncoder()
y = ohot.fit_transform(y)

y = y.toarray()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

# Commented out IPython magic to ensure Python compatibility.
import keras
from keras.models import Sequential
from keras.layers import *
import matplotlib.pyplot as plt
# %matplotlib inline #no need

model = Sequential()
model.add(Dense(8,activation='relu',input_dim = 10))
model.add(Dense(6,activation='relu'))
model.add(Dense(4,activation='softmax'))
model.summary()

model.compile(loss='categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])

history = model.fit(X_train,y_train,epochs=5,validation_data=(X_test,y_test),batch_size=64)

y_pred = model.predict(X_test)

pred = []
for i in range(len(y_pred)):
    pred.append(np.argmax(y_pred[i]))

test = []
for i in range(len(y_test)):
    test.append(np.argmax(y_test[i]))

from sklearn.metrics import accuracy_score
acc = accuracy_score(pred,test)
print("Accuracy of Your Model is = " + str(acc*100))

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend(['Features','Price_Weight'],loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend(['Features','Price_Weight'],loc='upper left')
plt.show()

